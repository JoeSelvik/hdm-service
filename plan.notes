## Contenders ##
* Id string -> TEXT
* Name string -> TEXT
* vd - TotalPosts []string -> BLOB
* vi - TotalLikesRx int -> INTEGER
* vi - AvgLikesPost int -> INTEGER
* vd - TotalLikesGiven int -> INTEGER
* Created/UpdatedTime *time.Time -> DATETIME

cls CreateContenderTable(all)
x GetFBContenders()
x for c in fbContenders: put in table, update both times
x adds new hdmContenders, does not destroy
- print each new hdmContender added

cls UpdateContender(tx *sql.Tx) (int64, error)

// assume will only be called once with a start and end date
cls UpdateHDMContenderDependentData()
x make map of contenders to modify
x GetHDMPosts()
x for p in hdmPosts:
  // in the future updating TotalLikesGiven will be idempotent by making it a list of postsids liked,
  // for now it dumly incraments for each post
  x c = GetHDMContender(p.author), update c.TotalPosts
  x TotalLikesRx = loop over each post and sum likes
  x AvgLikesPost = TotalLikesRx / len(TotalPosts)
  x update time
  x for l in p.TotalLikes
    x GetHDMContender(p.l[i]), update TotalLikesGiven, and UpdatedTime

cls UpdateContenderTable(all)
- GetFBContenders()
- GetHDMContenders()
- for c in hdmContenders: if in fbContenders, update AvgLikesPost and UpdatedTime, else warn of deleted hdmContender



## Posts ##
* Id string -> TEXT
* PostedDate *time.Time -> DATETIME
* Author string -> TEXT
* vi - TotalLikes int -> INTEGER
* Created/UpdatedTime *time.Time -> DATETIME

cls createPostsTable(startDate)
x GetFBPosts(startDate)
x for p in fbPosts: put in table, update both times
x adds new hdmPosts, does not destroy
- print each new hdmPostAdded

cls updateTable()
- GetFBPosts(startDate)
- GetHDMPosts()
- for p in hdmPosts: if in fbPosts, p.updateTotalLikes(len(p.likes)), else warn of deleted hdmPost



## Brackets ##
// for now assume only one
* Id string -> TEXT
* teams [][]string -> BLOB
* results []interface{} -> BLOB
* Created/UpdatedTime *time.Time -> DATETIME

m CreateBracket() Bracket
x CreateInitialTeams()
x CreateInitialResults()
x packin json, return Bracket, insert in DB

m serialize
m deserialize?



## Macthup ##
* Id         int
* Name       string
* ContenderA Contender
* APosts     []string
* AVotes     int
* ContenderB Contender
* BPosts     []string
* BVotes     int
* InProgress bool
* CreatedAt  time.Time
* UpdatedAt  time.Time

m GetMatchup(matchName string) []Match
- pull match from DB
- get contenders from matchName
- note: asynchronous

m CreateFirstRoundMatches(teams [][]string)
- or takes bracket?
- for each team set
  - get posts for each contender, if less than 5 unused reset?
  - pick 5 random posts from each contender, mark each as used
  - place each Match in DB

m StopFirstFound() teams [][]string
- for each match, mark Active as False
- return teams for SecondRound()


## hdm-service API handle ##
// note: these are all async

GetBracket()
- GET /bracketdata

GetMatch()
- GET /bracketdata?match='firstRound_m1'
- contenders = GetMatch()
- serialize and responde with json

PostVote()
- POST /match?match='firstRound_m1',vote='contenderA'
  - only enabled if InProgress is true



## main func
CreateContenderTable
CreatePostTable
UpdateHDMContenderDependentData

// manual
CreateBracket()
CreateFirstRoundMatches(teams [][]string)
StopFirstFound() teams [][]string



START 
- in posts.go, write GetHDMPostsByContenderUsername to be used in matchups.go's CreateFirstRoundMatchups
- clean up todo's in CreateFirstRoundMatchups
- in matchups.go write '(c *Contender) CreateMatchup' and CreateMatchupsTable
- write GetHDMMatchup - follow posts or contenders verisons
- How to keep result score hidden until round ends?
- write EndFirstRoundMatchups()
- FB speak method in main instead of listing all contenders
- clean up main, only main calls GetDBHandle?
- clan post, contender, bracket, matchup error handling
- add an int totalposts to contenders table for convenience and exploratory work

HDM Qs
- where to get and store a Post's permalink_url?
- move create table methods to own sql file?
- should I be using UNIQUE in my tables? does this show up with .schema?
- INSERT with new, INSERT with existing, vs INSERT OR REPLACE INTO
- should post.PostedDate be a time.Time instead of string

Golang Qs
- golang methods upper vs lower case
- glang default params
- does log.Fatal exit w/o hitting returns?


useful SQL commands
.mode column
.headers on
